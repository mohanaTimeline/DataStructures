package linkedlist;



public class linkedlist {
	
	private static class Listnode{
		
		private int data;
		private Listnode next;
		public Listnode(int data)
		{
			this.data=data;
			this.next=null;
		}

	}
public void display(Listnode head)
{
	if(head==null)
	{
		return;
	}
	Listnode current=head;
	while(current!=null)
	{
		System.out.println(current.data+"-->");
		current=current.next;
	}System.out.println(current);
}
public Listnode insertbeginning (Listnode head, int data)
{
	Listnode newnode=new Listnode(data);
	if(head==null)
	{
		return newnode;
	}
	newnode.next=head;
	head=newnode;
	return head;
	
}
public void insertafter (Listnode previous, int data)
{
	Listnode newnode=new Listnode(data);
	if(previous==null)
	{
		return;
	}
	newnode.next=previous.next;
	previous.next=newnode;
	
}
public Listnode insertend (Listnode head, int data)
{
	Listnode newnodee=new Listnode(data);
	if(head==null)
	{
		return newnodee;
	}
	Listnode current=head;
	while(null != current.next)
	{
		
		current=current.next;
	}
	current.next=newnodee;;
	return head;
	
}
public Listnode mergeTwoLists(Listnode l1, Listnode l2) 
{
	Listnode head = new Listnode(0);
	Listnode p = head;
while(l1!=null||l2!=null){
	if(l1!=null&&l2!=null){
		if(l1.data < l2.data){
			p.next = l1; l1=l1.next; }
		else{
			p.next=l2; l2=l2.next; }
		p = p.next; }
	else if(l1==null)
	{ p.next = l2; 
	break; 
	}
	else if(l2==null)
	{ p.next = l1; break;
	} }
return head.next;
}
public Listnode deleteposition (Listnode head, int position)
{int size=length(head);
if(position>size || position<1)
{
	System.out.println("invalid position");
	return head;
}
if(position==1)
{
	Listnode temp=head;
	head=head.next;
	temp.next=null;
	return temp;
	
}
else{
	Listnode previous=head;
	int count=1;
	while(count<position-1)
	{
		previous=previous.next;count++;

	}
	Listnode current=previous.next;
	previous.next=current.next;
	current.next=null;
	
	return current;
}
	
}
public Listnode insertposition (Listnode head, int data, int position)
{int size=length(head);
if(position>size+1 || position<1)
{
	System.out.println("invalid position");
	return head;
}Listnode newnode=new Listnode(data);
if(position==1)
{
	newnode.next=head;
	return newnode;
}
else{
	Listnode previous=head;
	int count=1;
	while(count<position-1)
	{
		previous=previous.next;count++;

	}
	Listnode current=previous.next;
	newnode.next=current;
	previous.next=newnode;
	return head;
}
	
}
public Listnode deleteLast(Listnode head)
{
	if(head==null){
		return head;}
	Listnode last=head;
	Listnode previoustolast=null;
	while(last.next!=null)
	{
		previoustolast=last;
		last=last.next;
	}
	previoustolast.next=null;
	return last;

	}
public boolean find(Listnode head, int searchkey)
{
	if(head==null){
		return false;}
	Listnode current=head;
	
	while(current!=null)
	{
		if(current.data==searchkey)
			return true;
	}
	current=current.next;
	return false;

	}
public Listnode deletefirst(Listnode head)
{
	if(head==null)
		return head;
	Listnode temp=head;
	head=head.next;
	temp.next=null;
	return temp;
	
}
public int length(Listnode head)
{
	if(head==null)
	{
		return 0;
	}
	Listnode current=head;int count=0;
	while(current!=null)
	{count++;
		
		current=current.next;
	}return count;
}

public static void main(String args[])
{

	Listnode head=new Listnode(10);
	Listnode first=new Listnode(12);
	Listnode second=new Listnode(13);
	Listnode third=new Listnode(14);
	head.next=first;
	first.next=second;
	second.next=third;
linkedlist ll=new linkedlist();
linkedlist l2=new linkedlist();
ll.display(head);
//System.out.println(ll.length(head));
//Listnode newhead = ll. insertbeginning(head,15);
//head=ll.insertposition(head,19,3);
//System.out.println(ll. insertbeginning(head, 15));
//ll.display(head);
//Listnode firrst=ll.deletefirst(head);
//Listnode last=ll.deleteLast(head);
//System.out.println(last.data);
//System.out.println(firrst.data);
Listnode last=ll.deleteposition(head,3);

Listnode newhead = ll. mergeTwoLists(head,head);
ll.display(newhead);
//System.out.println(last.data);
}}
